name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Windows executable
      run: npx rimraf dist && npx electron-builder --win portable --publish never
      
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: dist/*.exe
        
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Linux AppImage
      run: npx rimraf dist && npx electron-builder --linux AppImage --publish never

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: dist/*.AppImage

  build-macos:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build macOS DMG (ARM)
      run: npx rimraf dist && npx electron-builder --mac dmg --publish never
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: dist/*.dmg

  build-macos-intel:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build macOS DMG (Intel)
      run: npx rimraf dist && npx electron-builder --mac dmg --publish never --x64
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: Upload macOS Intel artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-intel-build
        path: dist/*.dmg

  create-release:
    needs: [build-windows, build-linux, build-macos, build-macos-intel]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Extract changelog for this version
      id: changelog
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        CHANGELOG=$(awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md)
        echo "BODY<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: ./dist-windows
        
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: linux-build
        path: ./dist-linux

    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: ./dist-macos

    - name: Download macOS Intel artifact
      uses: actions/download-artifact@v4
      with:
        name: macos-intel-build
        path: ./dist-macos-intel

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Portfolio Tracker v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Portfolio Tracker v${{ steps.get_version.outputs.VERSION }}
          
          ${{ steps.changelog.outputs.BODY }}
          
          ### Downloads
            - ü™ü **Windows:** [Portfolio.Tracker-${{ steps.get_version.outputs.VERSION }}.exe](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/Portfolio.Tracker.${{ steps.get_version.outputs.VERSION }}.exe)
            - üçè **macOS (Intel):** [Portfolio.Tracker-${{ steps.get_version.outputs.VERSION }}.dmg](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/Portfolio.Tracker-${{ steps.get_version.outputs.VERSION }}.dmg)
            - üçé **macOS (ARM64):** [Portfolio.Tracker-${{ steps.get_version.outputs.VERSION }}-arm64.dmg](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/Portfolio.Tracker-${{ steps.get_version.outputs.VERSION }}-arm64.dmg)
            - üêß **Linux:** [Portfolio.Tracker-${{ steps.get_version.outputs.VERSION }}.AppImage](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/Portfolio.Tracker-${{ steps.get_version.outputs.VERSION }}.AppImage)

          ### Installation
          - **Windows**: Download and run the .exe file - no installation needed
          - **macOS**: Download the DMG, open it, and drag to Applications folder
          - **Linux**: Download the AppImage, make it executable (`chmod +x`), and run
        files: |
          dist-windows/*.exe
          dist-macos/*.dmg
          dist-macos-intel/*.dmg
          dist-linux/*.AppImage
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}