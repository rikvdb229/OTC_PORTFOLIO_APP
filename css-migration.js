#!/usr/bin/env node

/**
 * ===== CSS MIGRATION SCRIPT - PORTFOLIO TRACKER =====
 * Safely consolidates CSS files into simplified structure
 *
 * USAGE: node css-migration.js
 *
 * WHAT IT DOES:
 * 1. Merges all table files into components/tables.css
 * 2. Consolidates layout files into layout/app.css and layout/header.css
 * 3. Simplifies folder structure (22 files ‚Üí 15 files)
 * 4. Updates main.css imports
 * 5. Preserves all existing functionality
 */

const fs = require("fs");
const path = require("path");

class CSSMigrator {
  constructor() {
    this.projectRoot = process.cwd();
    this.stylesDir = path.join(this.projectRoot, "styles");
    this.dryRun = process.argv.includes("--dry-run");

    this.migrations = {
      success: [],
      failed: [],
      warnings: [],
    };
  }

  async run() {
    console.log("üé® CSS MIGRATION - PORTFOLIO TRACKER");
    console.log("===================================\n");

    if (this.dryRun) {
      console.log("üîç DRY RUN MODE - Preview changes only\n");
    }

    try {
      // Step 1: Validate current structure
      await this.validateCurrentStructure();

      // Step 2: Create consolidated table file
      await this.consolidateTableFiles();

      // Step 3: Merge layout files
      await this.consolidateLayoutFiles();

      // Step 4: Move components to simplified structure
      await this.reorganizeComponents();

      // Step 5: Update main.css with new imports
      await this.updateMainImports();

      // Step 6: Remove old files
      if (!this.dryRun) {
        await this.removeOldFiles();
      }

      this.reportResults();
    } catch (_error) {      console.error("‚ùå Migration failed:", error.message);
      console.log("üí° Use git to revert changes if needed");
      process.exit(1);
    }
  }

  async validateCurrentStructure() {
    console.log("üîç Validating current structure...");

    const requiredFiles = [
      "styles/main.css",
      "styles/base/variables.css",
      "styles/tables/base.css",
      "styles/tables/portfolio.css",
    ];

    for (const file of requiredFiles) {
      if (!fs.existsSync(path.join(this.projectRoot, file))) {
        throw new Error(`Required file missing: ${file}`);
      }
    }

    console.log("‚úÖ Current structure validated\n");
  }

  async consolidateTableFiles() {
    console.log("üìä Consolidating table files...");

    const tableFiles = [
      "tables/columns.css",
      "tables/base.css",
      "tables/portfolio.css",
      "tables/evolution.css",
      "tables/sales.css",
      "tables/grants.css",
    ];

    let consolidatedCSS = `/* ===== CONSOLIDATED TABLE STYLES ===== */
/* Generated by CSS Migration Script */
/* Contains: columns.css, base.css, portfolio.css, evolution.css, sales.css, grants.css */

`;

    for (const file of tableFiles) {
      const filePath = path.join(this.stylesDir, file);
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, "utf8");
        consolidatedCSS += `\n/* ===== FROM ${file.toUpperCase()} ===== */\n`;
        consolidatedCSS += content;
        consolidatedCSS += "\n";

        console.log(`  ‚úÖ Merged: ${file}`);
      } else {
        console.log(`  ‚ö†Ô∏è  Missing: ${file}`);
        this.migrations.warnings.push(`Missing file: ${file}`);
      }
    }

    // Write consolidated file
    if (!this.dryRun) {
      const outputPath = path.join(this.stylesDir, "components", "tables.css");
      this.ensureDirectoryExists(path.dirname(outputPath));
      fs.writeFileSync(outputPath, consolidatedCSS);
      console.log(`‚úÖ Created: components/tables.css`);
    } else {
      console.log(
        `üìù Would create: components/tables.css (${consolidatedCSS.length} chars)`
      );
    }

    this.migrations.success.push("Table files consolidated");
  }

  async consolidateLayoutFiles() {
    console.log("\nüèóÔ∏è  Consolidating layout files...");

    // Merge window.css, sections.css, and footer.css into app.css
    const appLayoutFiles = [
      "layout/window.css",
      "layout/sections.css",
      "layout/footer.css",
    ];

    let appCSS = `/* ===== APP LAYOUT STYLES ===== */
/* Generated by CSS Migration Script */
/* Contains: window.css, sections.css, footer.css */

`;

    for (const file of appLayoutFiles) {
      const filePath = path.join(this.stylesDir, file);
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, "utf8");
        appCSS += `\n/* ===== FROM ${file.toUpperCase()} ===== */\n`;
        appCSS += content;
        appCSS += "\n";

        console.log(`  ‚úÖ Merged into app.css: ${file}`);
      }
    }

    // Keep header.css and navigation.css separate but merge them
    const headerFiles = ["layout/header.css", "layout/navigation.css"];

    let headerCSS = `/* ===== HEADER & NAVIGATION STYLES ===== */
/* Generated by CSS Migration Script */
/* Contains: header.css, navigation.css */

`;

    for (const file of headerFiles) {
      const filePath = path.join(this.stylesDir, file);
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, "utf8");
        headerCSS += `\n/* ===== FROM ${file.toUpperCase()} ===== */\n`;
        headerCSS += content;
        headerCSS += "\n";

        console.log(`  ‚úÖ Merged into header.css: ${file}`);
      }
    }

    if (!this.dryRun) {
      // Write app layout file
      const appPath = path.join(this.stylesDir, "layout", "app.css");
      fs.writeFileSync(appPath, appCSS);
      console.log(`‚úÖ Created: layout/app.css`);

      // Write header file (overwrite existing)
      const headerPath = path.join(this.stylesDir, "layout", "header.css");
      fs.writeFileSync(headerPath, headerCSS);
      console.log(`‚úÖ Updated: layout/header.css`);
    }

    this.migrations.success.push("Layout files consolidated");
  }

  async reorganizeComponents() {
    console.log("\nüß© Reorganizing components...");

    // Move status-indicators.css to components/status.css
    const statusPath = path.join(
      this.stylesDir,
      "features",
      "status-indicators.css"
    );
    if (fs.existsSync(statusPath)) {
      const content = fs.readFileSync(statusPath, "utf8");

      if (!this.dryRun) {
        const newPath = path.join(this.stylesDir, "components", "status.css");
        fs.writeFileSync(newPath, content);
        console.log(
          `‚úÖ Moved: features/status-indicators.css ‚Üí components/status.css`
        );
      }
    }

    // Consolidate responsive files
    const responsiveFiles = ["responsive/tablet.css", "responsive/mobile.css"];

    let responsiveCSS = `/* ===== RESPONSIVE STYLES ===== */
/* Generated by CSS Migration Script */
/* Contains: tablet.css, mobile.css */

`;

    for (const file of responsiveFiles) {
      const filePath = path.join(this.stylesDir, file);
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, "utf8");
        responsiveCSS += `\n/* ===== FROM ${file.toUpperCase()} ===== */\n`;
        responsiveCSS += content;
        responsiveCSS += "\n";

        console.log(`  ‚úÖ Merged: ${file}`);
      }
    }

    if (!this.dryRun) {
      const responsivePath = path.join(
        this.stylesDir,
        "responsive",
        "breakpoints.css"
      );
      fs.writeFileSync(responsivePath, responsiveCSS);
      console.log(`‚úÖ Created: responsive/breakpoints.css`);
    }

    this.migrations.success.push("Components reorganized");
  }

  async updateMainImports() {
    console.log("\nüìù Updating main.css imports...");

    const newMainCSS = `/* ===== MAIN CSS FILE - OTC Portfolio Tracker ===== */
/* Updated by CSS Migration Script */
/* Simplified import structure with consolidated files */

/* ===== BASE STYLES - Must load first ===== */
@import url("./base/variables.css");
@import url("./base/reset.css");

/* ===== LAYOUT COMPONENTS ===== */
@import url("./layout/app.css");
@import url("./layout/header.css");

/* ===== CORE COMPONENTS ===== */
@import url("./components/buttons.css");
@import url("./components/forms.css");
@import url("./components/modals.css");
@import url("./components/notifications.css");
@import url("./components/tooltips.css");
@import url("./components/status.css");

/* ===== TABLE SYSTEM - Consolidated into single file ===== */
@import url("./components/tables.css");

/* ===== FEATURE MODULES ===== */
@import url("./features/charts.css");
@import url("./features/settings.css");

/* ===== RESPONSIVE STYLES - Must load last ===== */
@import url("./responsive/breakpoints.css");

/* ===== ENSURE PROPER HEIGHT CALCULATION ===== */
html {
  height: 100%;
}

body {
  min-height: 100vh;
}

/* ===== IMPORTANT: OVERRIDE ANY CONFLICTING TAB-CONTENT STYLES ===== */
.tab-content.active {
  display: flex !important;
  flex-direction: column !important;
  height: auto !important;
  overflow: visible !important;
}
`;

    if (!this.dryRun) {
      const mainPath = path.join(this.stylesDir, "main.css");
      fs.writeFileSync(mainPath, newMainCSS);
      console.log("‚úÖ Updated main.css with new imports");
    } else {
      console.log("üìù Would update main.css with simplified imports");
    }

    this.migrations.success.push("Main imports updated");
  }

  async removeOldFiles() {
    console.log("\nüóëÔ∏è  Removing old files...");

    const filesToRemove = [
      "tables/columns.css",
      "tables/base.css",
      "tables/portfolio.css",
      "tables/evolution.css",
      "tables/sales.css",
      "tables/grants.css",
      "layout/window.css",
      "layout/sections.css",
      "layout/footer.css",
      "layout/navigation.css",
      "features/status-indicators.css",
      "responsive/tablet.css",
      "responsive/mobile.css",
    ];

    for (const file of filesToRemove) {
      const filePath = path.join(this.stylesDir, file);
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`  üóëÔ∏è  Removed: ${file}`);
      }
    }

    // Remove empty directories
    const dirsToCheck = [path.join(this.stylesDir, "tables")];

    for (const dir of dirsToCheck) {
      if (fs.existsSync(dir) && fs.readdirSync(dir).length === 0) {
        fs.rmdirSync(dir);
        console.log(`  üóëÔ∏è  Removed empty directory: ${path.basename(dir)}`);
      }
    }
  }

  ensureDirectoryExists(dir) {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  }

  reportResults() {
    console.log("\nüìä MIGRATION RESULTS");
    console.log("===================");

    console.log(`\n‚úÖ Success (${this.migrations.success.length}):`);
    this.migrations.success.forEach((item) => console.log(`  ‚Ä¢ ${item}`));

    if (this.migrations.warnings.length > 0) {
      console.log(`\n‚ö†Ô∏è  Warnings (${this.migrations.warnings.length}):`);
      this.migrations.warnings.forEach((item) => console.log(`  ‚Ä¢ ${item}`));
    }

    if (this.migrations.failed.length > 0) {
      console.log(`\n‚ùå Failed (${this.migrations.failed.length}):`);
      this.migrations.failed.forEach((item) => console.log(`  ‚Ä¢ ${item}`));
    }

    console.log("\nüéâ NEW STRUCTURE:");
    console.log(`styles/
‚îú‚îÄ‚îÄ main.css                 # Updated imports
‚îú‚îÄ‚îÄ base/
‚îÇ   ‚îú‚îÄ‚îÄ variables.css        # CSS variables
‚îÇ   ‚îî‚îÄ‚îÄ reset.css           # CSS reset
‚îú‚îÄ‚îÄ layout/
‚îÇ   ‚îú‚îÄ‚îÄ app.css             # Window + sections + footer
‚îÇ   ‚îî‚îÄ‚îÄ header.css          # Header + navigation
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ tables.css          # ALL table styles (NEW)
‚îÇ   ‚îú‚îÄ‚îÄ buttons.css         # Button styles
‚îÇ   ‚îú‚îÄ‚îÄ forms.css           # Form elements
‚îÇ   ‚îú‚îÄ‚îÄ modals.css          # Modal dialogs
‚îÇ   ‚îú‚îÄ‚îÄ notifications.css   # Notifications
‚îÇ   ‚îú‚îÄ‚îÄ tooltips.css        # Tooltips
‚îÇ   ‚îî‚îÄ‚îÄ status.css          # Status indicators (moved)
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îú‚îÄ‚îÄ charts.css          # Chart components
‚îÇ   ‚îî‚îÄ‚îÄ settings.css        # Settings panel
‚îî‚îÄ‚îÄ responsive/
    ‚îî‚îÄ‚îÄ breakpoints.css     # All responsive styles`);

    console.log("\nüìà IMPROVEMENTS:");
    console.log("  ‚Ä¢ 22 files ‚Üí 15 files (32% reduction)");
    console.log("  ‚Ä¢ All table styles in one place");
    console.log("  ‚Ä¢ Simplified import structure");
    console.log("  ‚Ä¢ Easier maintenance");

    if (!this.dryRun) {
      console.log("\n‚úÖ Migration completed successfully!");
      console.log("üí° Next: Run css-cleanup.js to remove duplicates");
    } else {
      console.log("\nüìã Run without --dry-run to execute migration");
    }
  }
}

// Handle rollback if needed
if (process.argv.includes("--rollback")) {
  console.log("üîÑ Use git to rollback changes:");
  console.log("   git checkout -- styles/");
  console.log("   git clean -fd styles/");
  process.exit(0);
}

// Run migration
const migrator = new CSSMigrator();
migrator.run().catch(console.error);
